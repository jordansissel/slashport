#!/usr/bin/env ruby

require "rubygems"
require "merb-core"
require "optparse"

class Options < Struct.new(:host, :port, :modules, :configs, :logfile, :pidfile)
  # empty
end # class Options

options = Options.new
options.host = "0.0.0.0"
options.port = 4000
options.modules = []
options.configs = []
options.logfile = "-"
options.pidfile = "/tmp/slashport.pid"

parser = OptionParser.new do |opts|
  opts.banner = "Usage; #{$0} [options}"

  opts.on("-l HOST[:PORT]", "--listen HOST[:PORT]",
          "Listen on specific host:port") do |v|

    options.host, options.port = v.split(":")

    if options.host == ""
      options.host = "0.0.0.0"
    end
    options.port ||= 4000
  end

  opts.on("-c COMPONENT", "--componet COMPONENT",
          "Load specific component") do |v|
    options.modules << v
  end

  opts.on("-f CONFIG", "--config CONFIG",
          "Read a config file") do |v|
    options.configs << v
  end

  opts.on("-o LOGFILE", "--log LOGFILE", "Logfile to write to") do |v|
    options.logfile = v
  end

  opts.on("-p PIDFILE", "--pidfile PIDFILE", "Pid file to write") do |v|
    options.pidfile = v
  end
end

parser.parse!

merbdir = "#{File::dirname(__FILE__)}/../"
merbopts = {
  :host => options.host,
  :port => options.port,
  :adapter => "mongrel",
  :reload_classes => false,
  :merb_root => merbdir,
  :log_level => :error,
  :name => "slashport",
  :environment => nil,
}

if options.logfile == "-"
  merbopts[:log_stream] = STDOUT
  merbopts[:log_file] = nil
else
  merbopts[:log_file] = options.logfile
  merbopts[:log_stream] = nil
end

Merb::BootLoader.after_app_loads do
  options.modules.each do |name|
    require name
  end

  count = 0
  options.configs.each do |name|
    File.open(name).each do |line|
      line.chomp!
      puts "Config: #{line}"
      next unless line =~ /^exec ([A-z0-9_-]+) ([A-z0-9_-]+) (.+)/
      # format: exec <component> <section> <command ...>

      component = $1
      section = $2
      cmd = $3
      func = "#{component}_#{section}".tr("-", "_")
      puts "Func: #{func}"
      eval %{
        module SlashPort
          module ConfigGenerated
            class #{component.upcase} < SlashPort::Component
              attribute :name => "#{section}",
                        :handler => :#{func},
                        :doc => "#{func}"

              def #{func}
                return SlashPort::Exec.new("#{cmd}").to_tuple
              end
            end # class #{component.upcase}
          end # module ConfigGenerated
        end # module SlashPort
      }

      count += 1
    end
  end
end # BootLoader.after_app_loads

puts "Starting server"
puts options.inspect
puts merbopts.inspect
Merb.start(merbopts)

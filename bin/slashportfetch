#!/usr/bin/env ruby

require "rubygems"
require "json"
require "optparse"
require "ostruct"
require "net/http"
require "uri"

$: << "#{File::dirname(__FILE__)}/../lib"
require "slashport"

checks = []
ignores = []
options = OpenStruct.new
options.filters = []
options.port = 4000
argstr = ARGV.join(" ")
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.on("-f FILTER", "--filter FILTER", "Add a filter") do |v|
    name, value = v.split("=", 2)
    options.filters << [ name, value ]
  end

  opts.on("-i FILTER", "--ignore FILTER", "Ignore things matching a check") do |v|
    check = SlashPort::Check.new_from_string(v)
    if check == nil
      puts "Invalid check #{v}"
      exit 1
    end
    ignores << check
  end
  
  opts.on("-h HOST[:PORT]", "--host HOST[:PORT]", "Host to query") do |v|
    host, port = v.split(":",2)
    port ||= 4000
    options.host = host
    options.port = port
  end

  opts.on("-c CHECK", "--check CHECK", "Output if CHECK succeeds") do |v|
    check = SlashPort::Check.new_from_string(v)
    if check == nil
      puts "Invalid check #{v}"
      exit 1
    end
    checks << check
  end
end
parser.parse!

if options.host == nil
  puts "No --host specified."
  exit 1
end

exitcode = 0
fetcher = SlashPort::Fetcher.new(options.host, options.port)
options.filters.each do |filter|
  fetcher.add_filter(*filter)
end

matches = 0
fetcher.fetch.each do |entry|
  # Skip if this entry matches any ignores
  next if ignores.select { |check| check.match?(entry) }.length > 0

  if checks.length == 0
    puts entry.inspect
    matches += 1
  end

  checks.each do |check|
    if check.match?(entry)
      puts "#{check} matches #{entry.inspect}"
      exitcode = 2
      matches += 1
    end
  end
end

if matches == 0
  puts "#{matches} matches to #{$0} #{argstr}"
end

exit exitcode
